---
description: 
globs: 
alwaysApply: false
---
Here‚Äôs a Markdown file you can add to your cursor project to define and document the file upload rule based on your system:

# üóÇÔ∏è Rule: File Upload Field Configuration

## Rule Name
`file_upload_field`

## Description
This rule enables a dynamic form field of type `file` that integrates with the system‚Äôs file storage table (`forms.files`). It supports single or multiple file uploads and stores file metadata while linking uploads to specific records using a many-to-one relationship.

## Example JSON Field

```json
{
  "acl": "public",
  "name": "header_url",
  "type": "file",
  "label": "Header Image",
  "bucket": "article-assets",
  "validations": [
    "file",
    "image"
  ],
  "storage_path": "public/articles/header_images"
}

Requirements
	‚Ä¢	bucket: A Supabase Storage bucket. Must exist.
	‚Ä¢	storage_path: Relative path inside the bucket to store the file.
	‚Ä¢	acl: Access control (e.g., "public" or "private").
	‚Ä¢	type: Must be "file" to trigger upload handling.
	‚Ä¢	validations: Array to specify file constraints (file, image, etc.).

System Behavior
	‚Ä¢	Uploads are stored in the specified bucket and path.
	‚Ä¢	A record is inserted into forms.files:
	‚Ä¢	resource_id
	‚Ä¢	resource_table_name
	‚Ä¢	field_name
	‚Ä¢	bucket
	‚Ä¢	path
	‚Ä¢	acl
	‚Ä¢	Other metadata (e.g. mime_type, size, uploaded_at)
	‚Ä¢	On form render, related files are fetched via resource_id, resource_table_name, and field_name.

Usage

Attach this field configuration to any form schema where a file (image, PDF, etc.) is required. The frontend renderer should support:
	‚Ä¢	Upload UI
	‚Ä¢	Preview (if image)
	‚Ä¢	Handling of uploaded file metadata

Notes
	‚Ä¢	Buckets must be pre-created.
	‚Ä¢	This system supports versioning, previews, and access control via metadata expansion in the future.

Let me know if you'd like a YAML version or if you want to define this as part of a schema in Cursor‚Äôs DSL.


## Display Options

when viewing a page like **forms/FORM_NAME/all**

We might want to hide a field like body since it is too big

```json
{
    "name": "content",
    "type": "textarea",
    "label": "Content",
    "views": [
        {
        "name": "all",
        "display": "none" 
        }
    ],
}
```

so we check views with name "all" and then display none means hide it by default we show all columns